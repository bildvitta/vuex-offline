{"version":3,"file":"index.min.js","sources":["../src/databaseSetup.js","../src/utils/collectionHandler.js","../src/utils/parseHandler.js","../src/utils/filtersHandler.js","../src/utils/formatError.js","../src/utils/relationsHandler.js","../src/utils/uuid.js","../src/utils/validateCustomError.js","../src/utils/nested.js","../src/vuexOffline.js"],"sourcesContent":["import { createRxDatabase, addRxPlugin } from 'rxdb'\n\n/**\n * Class to abstract the PouchDB implementation.\n *\n  * @param {options} DatabaseSetup options.\n */\nexport default class {\n  constructor (options = { databaseOptions: {} }) {\n    this.options = options\n    this.databaseOptions = options.databaseOptions\n    this.databaseName = this.databaseOptions.alias || this.databaseOptions.name\n    this.collectionsOptions = options.collections\n\n    this.database = null\n    this.collections = null\n\n    this.initialize()\n  }\n\n  initialize () {\n    this.addPlugins([\n      require('pouchdb-adapter-idb'),\n      require('pouchdb-adapter-http')\n    ])\n  }\n\n  /**\n   * Add a plugin to rxdb.\n   *\n   * @param {addRxPlugin} plugin PouchDB plugin\n   */\n  addPlugin (plugin) {\n    addRxPlugin(plugin)\n  }\n\n  /**\n   * Add a list of plugins to PouchDB.\n   *\n   * @param {PouchDB[]} plugins List of PouchDB plugins\n   */\n  addPlugins (plugins) {\n    return plugins.forEach(plugin => this.addPlugin(plugin))\n  }\n\n  async createDatabase () {\n    try {\n      this.database = await createRxDatabase(this.databaseOptions)\n\n      return this.database\n    } catch (error) {\n      throw new Error('Error creating database.', error)\n    }\n  }\n\n  /**\n   * Get the database\n   *\n   * @param {string} name name of db.\n   *\n   * @example\n   * databaseSetup.getDatabase('myDatabase')\n   */\n  getDatabase (name) {\n    return this.databases[name]\n  }\n\n  /**\n   * Get the databases list\n   */\n  getDatabaseList () {\n    return this.databases\n  }\n\n  /**\n   * Delete the database. Note that this has no impact on other replicated databases.\n   * Check: {@link https://rxdb.info/rx-database.html#destroy}\n   *\n   * @param {string} name name of database to be deleted\n   *\n   * @example\n   * databaseSetup.deleteDatabase('myDatabase')\n   */\n  async deleteDatabase (name) {\n    const database = this.getDatabase(name)\n\n    if (!database) {\n      throw new Error('Please provide a valid database to be deleted.')\n    }\n\n    try {\n      await database.destroy()\n    } catch (error) {\n      throw new Error('Error deleting database.', error)\n    }\n  }\n\n  async createCollections (collections) {\n    try {\n      // addCollections from rxdb\n      const collection = await this.database.addCollections(collections || this.collectionsOptions)\n      this.collections = this.database.collections\n\n      return collection\n    } catch (error) {\n      throw new Error('Error creating collections.', error)\n    }\n  }\n}\n","export default class {\n  constructor (collection) {\n    this.collection = collection\n  }\n\n  async getCount (query) {\n    const list = await this.collection.find(query).exec()\n\n    return list.length\n  }\n\n  getCustomFields (callback = function () {}) {\n    const customFields = {}\n    const fields = this.getAllFields()\n\n    for (const key in fields) {\n      if (fields[key].props) {\n        customFields[key] = fields[key].props\n        callback(fields[key].props)\n      }\n    }\n\n    return customFields\n  }\n\n  getAllFields () {\n    return this.collection.schema.jsonSchema.properties\n  }\n\n  getFiltersFields () {\n    const filtersFields = {}\n    const customFields = this.getCustomFields()\n\n    for (const key in customFields) {\n      const filters = customFields[key].filter\n\n      if (!filters) continue\n\n      if (typeof filters === 'boolean') {\n        filtersFields[key] = customFields[key].field\n        continue\n      }\n\n      for (const filtersKey in filters) {\n        filtersFields[filtersKey] = filters[filtersKey]\n      }\n    }\n\n    return filtersFields\n  }\n\n  getOnlyFields () {\n    const customFields = this.getCustomFields()\n    const fields = {}\n\n    for (const key in customFields) {\n      if (customFields[key].field) {\n        fields[key] = customFields[key].field\n      }\n    }\n\n    return fields\n  }\n\n  getFiltersAndSearch () {\n    const customFields = this.getFiltersFields()\n    const object = {\n      filters: [],\n      search: []\n    }\n\n    for (const key in customFields) {\n      object.filters.push(key)\n      customFields[key].search && object.search.push(key)\n    }\n\n    return object\n  }\n\n  getNestedFields (callback = function () {}) {\n    const nestedFields = {}\n\n    this.getCustomFields(custom => {\n      const { field } = custom\n\n      if (field && field.type === 'nested') {\n        nestedFields[field.name] = custom\n        callback(custom)\n      }\n    })\n\n    return nestedFields\n  }\n\n  getFieldsWithRelation () {\n    const fields = {}\n    const allFields = this.getAllFields()\n\n    for (const key in allFields) {\n      if (allFields[key].ref) {\n        fields[key] = allFields[key]\n      }\n    }\n\n    return fields\n  }\n}\n","export default class {\n  parseValue (value) {\n    try { return JSON.parse(value) } catch { return value }\n  }\n\n  parseBoolean (value) {\n    return ['true', 'false'].some(item => item === value) ? this.parseValue(value) : value\n  }\n}\n","import ParseHandler from './parseHandler'\n\nexport default class {\n  constructor({ receivedFilters, filtersList, receivedSearch = '', searchList, fieldsList }) {\n    this.fieldsList = fieldsList\n    this.filtersList = filtersList\n    this.receivedFilters = receivedFilters\n    this.receivedSearch = receivedSearch\n    this.searchList = searchList\n    this.parseHandler = new ParseHandler()\n  }\n\n  getFilterFields () {\n    const filters = {}\n\n    for (const filter of this.filtersList) {\n      if (!this.fieldsList[filter]) {\n        throw new Error(`Filter \"${filter}\" doesn't exists.`)\n      }\n\n      filters[filter] = this.fieldsList[filter]\n    }\n\n    return filters\n  }\n\n  _setDefaultValueToQueryOperator (queryOperator, value) {\n    const defaultValues = {\n      $all: [value],\n      $eq: this.parseHandler.parseBoolean(value)\n    }\n\n    if (!(queryOperator in defaultValues)) {\n      return value\n    }\n\n    return defaultValues[queryOperator]\n  }\n\n  transformQuery () {\n    const transformedQuery = {}\n\n    for (const item of this.filtersList) {\n      const filterField = this.fieldsList[item]\n      transformedQuery[filterField.queryOrigin || item] = transformedQuery[filterField.queryOrigin || item] || {}\n\n      if (this.receivedFilters[item]) {\n        Object.assign(\n          transformedQuery[filterField.queryOrigin || item],\n          filterField.queryOperator\n            ? {\n              [filterField.queryOperator]: this._setDefaultValueToQueryOperator(\n                filterField.queryOperator, this.receivedFilters[item]\n              )\n            }\n            : { $regex: `.*${this.receivedFilters[item]}.*` }\n          )\n\n        continue\n      }\n\n      if (this.receivedSearch && filterField.search) {\n        Object.assign(transformedQuery[filterField.queryOrigin || item], { $regex: `.*${this.receivedSearch}.` })\n      }\n    }\n\n    return {\n      selector: {\n        ...transformedQuery\n      }\n    }\n  }\n}\n","export default class {\n  constructor ({ errors, status = {} } = {}) {\n    return {\n      response: {\n        data: {\n          errors,\n          status: { code: 400 }\n        }\n      }\n    }\n  }\n}\n","import CollectionHandler from './collectionHandler'\nimport { cloneDeep } from 'lodash'\n\nexport default class {\n  constructor (collection, collections) {\n    this.collectionHandler = new CollectionHandler(collection)\n    this.fieldsWithRelation = this.collectionHandler.getFieldsWithRelation()\n    this.collections = collections\n  }\n\n  setOptions (documents = [], key) {\n    const options = []\n\n    documents.forEach(document => {\n      const parsedDocument = document.toJSON()\n\n      options.push({\n        value: document.uuid,\n        label: document[this.fieldsWithRelation[key].props['refLabel']],\n        data: parsedDocument\n      })\n\n      return parsedDocument\n    })\n\n    return options\n  }\n\n  async getFieldsWithRelationOptionsById (document) {\n    const fields = cloneDeep(this.collectionHandler.getOnlyFields())\n\n    for (const key in this.fieldsWithRelation) {\n      fields[key].options = this.setOptions(\n        await document.populate(this.fieldsWithRelation[key].ref), key\n      )\n    }\n\n    return fields\n  }\n\n  async getFieldsWithRelationOptions (externalFields) {\n    const fields = cloneDeep(externalFields || this.collectionHandler.getOnlyFields())\n\n    for (const key in this.fieldsWithRelation) {\n      fields[key].options = this.setOptions(\n        await this.collections[this.fieldsWithRelation[key].ref].find().exec(), key\n      )\n    }\n\n    return fields\n  }\n}\n","export default class {\n  create (date) {\n    date = date || new Date()\n\n    const uuid = this.uuidv4()\n    let comb = ('00000000000' + date.getTime().toString(16)).substr(-12)\n    comb = comb.slice(0, 8) + '-' + comb.slice(8, 12)\n\n    return uuid.replace(uuid.slice(0, 13), comb)\n  }\n\n  uuidv4 () {\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    )\n  }\n}\n","import FormatError from './formatError'\nimport CollectionHandler from './collectionHandler'\n\nexport default class {\n  constructor(rxError, collection) {\n    this.errors = rxError.parameters.errors\n    this.schema = rxError.parameters.schema\n    this.collectionHandler = new CollectionHandler(collection)\n    this.customFields = this.collectionHandler.getCustomFields()\n\n    return new FormatError({\n      errors: this.setErrors()\n    })\n  }\n\n  getErrorMessagesFromCustomFields () {\n    const errorMessages = {}\n\n    for (const key in this.customFields) {\n      if (this.customFields[key].errorMessage) {\n        errorMessages[key] = this.customFields[key].errorMessage\n      }\n    }\n\n    return errorMessages\n  }\n\n  setErrors () {\n    const errors = {}\n    const customErrors = this.getErrorMessagesFromCustomFields()\n\n    for (const error of this.errors) {\n      const { field } = error\n      const key = field.split('.')[1]\n\n      errors[key] = customErrors[key]\n    }\n\n    return errors\n  }\n}\n","export default class {\n  handler (nested = [], destroyKey = 'destroyed') {\n    if (!Array.isArray(nested)) {\n      throw new Error('Array needed.')\n    }\n\n    let index = 0\n    let counter = 1\n\n    function hasNext () {\n      return index < nested.length\n    }\n\n    function next () {\n      return nested[index++]\n    }\n\n    while (hasNext()) {\n      const current = next()\n\n      if (current.id && !current[destroyKey]) {\n        counter = current.id\n      }\n\n      if (current[destroyKey]) {\n        index--\n        nested.splice(index, 1)\n        continue\n      }\n\n      current.id = counter\n\n      for (const key in current) {\n        if (Array.isArray(current[key]) && current[key].length) {\n          this.handler(nested[index - 1][key])\n        }\n      }\n\n      counter++\n    }\n\n    return nested\n  }\n}\n","import { formatISO } from 'date-fns'\n\nimport DatabaseSetup from './databaseSetup'\nimport CollectionHandler from './utils/collectionHandler'\nimport FiltersHandler from './utils/filtersHandler'\nimport FormatError from './utils/formatError'\nimport RelationsHandler from './utils/relationsHandler'\nimport Uuid from './utils/uuid'\nimport ValidateCustomError from './utils/validateCustomError'\nimport Nested from './utils/nested'\n\nexport default class VuexOffline {\n  constructor (databaseSetup, options = {}) {\n    if (!(databaseSetup instanceof DatabaseSetup)) {\n      throw new Error('Please, provide an instance of DatabaseSetup')\n    }\n\n    this.databaseSetup = databaseSetup\n    this.idAttribute = options.idAttribute\n  }\n\n  async createStoreModule (collectionName, options = {}) {\n    if (!collectionName) {\n      throw new Error('CollectionName name must be sended.')\n    }\n\n    const idAttribute = options.idAttribute || this.idAttribute || 'uuid'\n    const perPage = options.perPage || 12\n    const collection = this.databaseSetup.collections[collectionName]\n\n    const collectionHandler = new CollectionHandler(collection)\n    const { filters: filtersList, search: searchList } = collectionHandler.getFiltersAndSearch()\n    const fieldsList = collectionHandler.getFiltersFields()\n    const fieldsWithRelation = collectionHandler.getFieldsWithRelation()\n    const allFields = collectionHandler.getAllFields()\n\n    const relationsHandler = new RelationsHandler(collection, this.databaseSetup.collections)\n    const fieldsWithRelationOptions = await relationsHandler.getFieldsWithRelationOptions()\n\n    const nested = new Nested()\n\n    const save = async ({ commit }, { payload, id, model } = {}) => {\n      try {\n        const document = collection.findOne(id || payload.uuid)\n\n        if (!document || (!id && !payload.uuid)) {\n          throw new FormatError({\n            status: { code: '404', text: 'Not found' }\n          })\n        }\n\n        if (allFields.updatedAt) {\n          payload.updatedAt = formatISO(new Date())\n        }\n\n        collectionHandler.getNestedFields(nestedField => {\n          payload[nestedField.field.name] = nested.handler(\n            payload[nestedField.field.name]\n          )\n        })\n\n        const parsedDocument = await document.update({ $set: { ...payload } })\n\n        commit('setErrors', { model })\n        commit('replaceItem', parsedDocument.toJSON())\n\n        return {\n          data: {\n            result: parsedDocument,\n            status: { code: 200 }\n          }\n        }\n      } catch (error) {\n        commit('setErrors', { model, hasError: true })\n        throw new ValidateCustomError(error, collection)\n      }\n    }\n\n    const module = {\n      namespaced: true,\n\n      // states\n      state: {\n        filters: {},\n        list: [],\n        totalPages: 0,\n        errors: {\n          onCreate: false,\n          onFetchSingle: false,\n          onFetchList: false,\n          onReplace: false,\n          onFetchFilters: false\n        }\n      },\n\n      // getters\n      getters: {\n        list: state => state.list,\n\n        filters: state => state.filters,\n\n        totalPages: state => state.totalPages,\n\n        byId: state => id => state.list.find(item => item[idAttribute] === id)\n      },\n\n      // mutations\n      mutations: {\n        setFilters (state, payload) {\n          state.filters = payload\n        },\n\n        setList (state, payload) {\n          const { results, increment, count } = payload\n          state.list = results || []\n\n          increment ? state.list.push(...results) : state.list = results || []\n\n          state.totalPages = Math.ceil(count / perPage)\n        },\n\n        setItemList (state, payload = {}) {\n          state.list.push(payload)\n        },\n\n        setErrors (state, { model, hasError }) {\n          state[model] = !!hasError\n        },\n\n        replaceItem (state, payload) {\n          const index = state.list.findIndex(item => item[idAttribute] === payload[idAttribute])\n          \n          ~index ? state.list.splice(index, 1, payload) : state.list.push(payload)\n        },\n\n        removeItem (state, id) {\n          const index = state.list.findIndex(item => item[idAttribute] === id)\n\n          ~index && state.list.splice(index, 1)\n        }\n      },\n\n      // actions\n      actions: {\n        create: async ({ commit }, { payload }) => {\n          try {\n            const uuid = new Uuid()\n            const documentToBeInserted = { uuid: uuid.create(), ...payload }\n            const dateNow = formatISO(new Date())\n\n            if (allFields.createdAt) {\n              documentToBeInserted.createdAt = dateNow\n            }\n\n            if (allFields.updatedAt) {\n              documentToBeInserted.updatedAt = dateNow\n            }\n\n            collectionHandler.getNestedFields(nestedField => {\n              documentToBeInserted[nestedField.field.name] = nested.handler(\n                documentToBeInserted[nestedField.field.name]\n              )\n            })\n\n            const document = await collection.insert(documentToBeInserted)\n            const parsedDocument = document.toJSON()\n\n            commit('setErrors', { model: 'onCreate' })\n            commit('setItemList', parsedDocument)\n\n            return {\n              data: {\n                metadata: { ...parsedDocument },\n                status: { code: 200 }\n              }\n            }\n          } catch (error) {\n            commit('setErrors', { model: 'onCreate', hasError: true })\n            throw new ValidateCustomError(error, collection)\n          }\n        },\n\n        replace: async ({ commit }, { payload, id } = {}) => {\n          return save({ commit }, { payload, id, model: 'onReplace' })\n        },\n\n        update: async ({ commit }, { payload, id } = {}) => {\n          return save({ commit }, { payload, id, model: 'onUpdate' })\n        },\n\n        fetchSingle: async ({ commit }, { form, id, params, url } = {}) => {\n          if (!id && form) {\n            return {\n              data: {\n                status: { code: 200 },\n                fields: fieldsWithRelationOptions\n              }\n            }\n          }\n\n          try {\n            const document = await collection.findOne(id).exec()\n\n            if (!document) {\n              throw new FormatError({\n                status: { code: '404', text: 'Not found' }\n              })\n            }\n\n            const parsedDocument = document.toJSON()\n            const fields = form\n              ? fieldsWithRelationOptions\n              : await relationsHandler.getFieldsWithRelationOptionsById(parsedDocument)\n\n            commit('replaceItem', parsedDocument)\n            commit('setErrors', { model: 'onFetchSingle' })\n\n            return {\n              data: {\n                fields,\n                result: parsedDocument,\n                status: { code: 200 }\n              }\n            }\n          } catch (error) {\n            commit('setErrors', { model: 'onFetchSingle', hasError: true })\n            throw error\n          }\n        },\n\n        fetchFilters: async ({ commit }) => {\n          const filtersHandler = new FiltersHandler({ filtersList, fieldsList })\n          const filterFields = filtersHandler.getFilterFields()\n          const formattedFilterFields = await relationsHandler.getFieldsWithRelationOptions(filterFields)\n\n          commit('setFilters', formattedFilterFields)\n\n          return {\n            fields: formattedFilterFields,\n            status: { code: 200 }\n          }\n        },\n\n        fetchList: async (\n          { commit },\n          { filters = {}, increment, ordering = [], page = 1, limit, search } = {}\n        ) => {\n          try {\n            const filtersHandler = new FiltersHandler({\n              receivedFilters: filters,\n              filtersList,\n              receivedSearch: search,\n              searchList,\n              fieldsList\n            })\n\n            const skip = (page - 1) * (limit || perPage)\n            const query = filtersHandler.transformQuery()\n            const count = await collectionHandler.getCount(query)\n            const documents = await collection.find(query).limit(limit || perPage).skip(skip).exec()\n            const parsedDocuments = documents.map(document => document.toJSON())\n\n            commit('setList', { results: parsedDocuments, increment, count })\n            commit('setErrors', { model: 'onFetchList' })\n\n            return {\n              data: {\n                results: parsedDocuments,\n                fields: fieldsWithRelationOptions,\n                status: { code: 200 }\n              }\n            }\n          } catch (error) {\n            commit('setErrors', { model: 'onFetchList', hasError: true })\n            throw error\n          }\n        },\n\n        destroy: async ({ commit }, { id } = {}) => {\n          try {\n            const document = await collection.findOne(id).exec()\n\n            if (!document) {\n              throw new FormatError({\n                status: { code: 404, text: 'Not found' }\n              })\n            }\n\n            document.remove()\n\n            commit('removeItem', id)\n            commit('setErrors', { model: 'onDestroy' })\n\n            return { status: { code: 200 } }\n          } catch (error) {\n            commit('setErrors', { model: 'onDestroy', hasError: true })\n            throw error\n          }\n        }\n      }\n    }\n\n    Object.assign(module.actions, options.actions)\n    Object.assign(module.mutations, options.mutations)\n\n    return module\n  }\n}\n"],"names":["options","databaseOptions","databaseName","this","alias","name","collectionsOptions","collections","database","initialize","addPlugins","require","plugin","addRxPlugin","plugins","forEach","_this","addPlugin","createRxDatabase","Error","databases","getDatabase","destroy","addCollections","collection","query","find","exec","list","length","callback","customFields","fields","getAllFields","key","props","schema","jsonSchema","properties","filtersFields","getCustomFields","filters","filter","filtersKey","field","getFiltersFields","object","search","push","nestedFields","custom","type","allFields","ref","value","JSON","parse","some","item","parseValue","receivedFilters","filtersList","receivedSearch","searchList","fieldsList","parseHandler","ParseHandler","queryOperator","defaultValues","$all","$eq","parseBoolean","transformedQuery","filterField","queryOrigin","Object","assign","_setDefaultValueToQueryOperator","$regex","selector","errors","status","response","data","code","collectionHandler","CollectionHandler","fieldsWithRelation","getFieldsWithRelation","documents","document","parsedDocument","toJSON","uuid","label","cloneDeep","getOnlyFields","populate","setOptions","externalFields","date","Date","uuidv4","comb","getTime","toString","substr","slice","replace","c","crypto","getRandomValues","Uint8Array","rxError","parameters","FormatError","setErrors","errorMessages","errorMessage","customErrors","getErrorMessagesFromCustomFields","split","nested","destroyKey","Array","isArray","index","counter","hasNext","next","current","id","splice","handler","VuexOffline","databaseSetup","DatabaseSetup","idAttribute","collectionName","perPage","getFiltersAndSearch","relationsHandler","RelationsHandler","getFieldsWithRelationOptions","fieldsWithRelationOptions","Nested","save","commit","payload","model","findOne","text","updatedAt","formatISO","getNestedFields","nestedField","update","$set","result","hasError","ValidateCustomError","module","namespaced","state","totalPages","onCreate","onFetchSingle","onFetchList","onReplace","onFetchFilters","getters","byId","mutations","setFilters","setList","results","increment","count","Math","ceil","setItemList","replaceItem","findIndex","removeItem","actions","create","Uuid","documentToBeInserted","dateNow","createdAt","insert","metadata","fetchSingle","form","params","url","getFieldsWithRelationOptionsById","fetchFilters","filtersHandler","FiltersHandler","filterFields","getFilterFields","formattedFilterFields","fetchList","ordering","page","limit","skip","transformQuery","getCount","parsedDocuments","map","remove"],"mappings":"qhGAQeA,yDAAU,CAAEC,gBAAiB,mBACnCD,QAAUA,OACVC,gBAAkBD,EAAQC,qBAC1BC,aAAeC,KAAKF,gBAAgBG,OAASD,KAAKF,gBAAgBI,UAClEC,mBAAqBN,EAAQO,iBAE7BC,SAAW,UACXD,YAAc,UAEdE,2DAGP,gBACOC,WAAW,CACdC,QAAQ,uBACRA,QAAQ,mDASZ,SAAWC,GACTC,cAAYD,6BAQd,SAAYE,qBACHA,EAAQC,SAAQ,SAAAH,UAAUI,EAAKC,UAAUL,kEAGlD,sHAE0BM,mBAAiBf,KAAKF,oCAAvCO,kCAEEL,KAAKK,gDAEN,IAAIW,MAAM,gKAYpB,SAAad,UACJF,KAAKiB,UAAUf,kCAMxB,kBACSF,KAAKiB,sEAYd,WAAsBf,4FACdG,EAAWL,KAAKkB,YAAYhB,yBAG1B,IAAIc,MAAM,kFAIVX,EAASc,uEAET,IAAIH,MAAM,qMAIpB,WAAyBZ,kHAGIJ,KAAKK,SAASe,eAAehB,GAAeJ,KAAKG,kCAApEkB,cACDjB,YAAcJ,KAAKK,SAASD,8BAE1BiB,yCAED,IAAIL,MAAM,0KCxGPK,kBACNA,WAAaA,wEAGpB,WAAgBC,yGACKtB,KAAKqB,WAAWE,KAAKD,GAAOE,qBAAzCC,2BAECA,EAAKC,mIAGd,eAAiBC,yDAAW,aACpBC,EAAe,GACfC,EAAS7B,KAAK8B,mBAEf,IAAMC,KAAOF,EACZA,EAAOE,GAAKC,QACdJ,EAAaG,GAAOF,EAAOE,GAAKC,MAChCL,EAASE,EAAOE,GAAKC,eAIlBJ,8BAGT,kBACS5B,KAAKqB,WAAWY,OAAOC,WAAWC,2CAG3C,eACQC,EAAgB,GAChBR,EAAe5B,KAAKqC,sBAErB,IAAMN,KAAOH,EAAc,KACxBU,EAAUV,EAAaG,GAAKQ,UAE7BD,KAEkB,kBAAZA,MAKN,IAAME,KAAcF,EACvBF,EAAcI,GAAcF,EAAQE,QALpCJ,EAAcL,GAAOH,EAAaG,GAAKU,aASpCL,+BAGT,eACQR,EAAe5B,KAAKqC,kBACpBR,EAAS,OAEV,IAAME,KAAOH,EACZA,EAAaG,GAAKU,QACpBZ,EAAOE,GAAOH,EAAaG,GAAKU,cAI7BZ,qCAGT,eACQD,EAAe5B,KAAK0C,mBACpBC,EAAS,CACbL,QAAS,GACTM,OAAQ,QAGL,IAAMb,KAAOH,EAChBe,EAAOL,QAAQO,KAAKd,GACpBH,EAAaG,GAAKa,QAAUD,EAAOC,OAAOC,KAAKd,UAG1CY,iCAGT,eAAiBhB,yDAAW,aACpBmB,EAAe,eAEhBT,iBAAgB,SAAAU,OACXN,EAAUM,EAAVN,MAEJA,GAAwB,WAAfA,EAAMO,OACjBF,EAAaL,EAAMvC,MAAQ6C,EAC3BpB,EAASoB,OAIND,uCAGT,eACQjB,EAAS,GACToB,EAAYjD,KAAK8B,mBAElB,IAAMC,KAAOkB,EACZA,EAAUlB,GAAKmB,MACjBrB,EAAOE,GAAOkB,EAAUlB,WAIrBF,mFCvGT,SAAYsB,cACGC,KAAKC,MAAMF,GAAS,gBAAeA,+BAGlD,SAAcA,SACL,CAAC,OAAQ,SAASG,MAAK,SAAAC,UAAQA,IAASJ,KAASnD,KAAKwD,WAAWL,GAASA,0CCHrEM,IAAAA,gBAAiBC,IAAAA,gBAAaC,eAAAA,aAAiB,KAAIC,IAAAA,WAAYC,IAAAA,0BACtEA,WAAaA,OACbH,YAAcA,OACdD,gBAAkBA,OAClBE,eAAiBA,OACjBC,WAAaA,OACbE,aAAe,IAAIC,2CAG1B,iBACQzB,EAAU,OAEKtC,KAAK0D,4CAAa,KAA5BnB,cACJvC,KAAK6D,WAAWtB,SACb,IAAIvB,wBAAiBuB,yBAG7BD,EAAQC,GAAUvC,KAAK6D,WAAWtB,yCAG7BD,iDAGT,SAAiC0B,EAAeb,OACxCc,EAAgB,CACpBC,KAAM,CAACf,GACPgB,IAAKnE,KAAK8D,aAAaM,aAAajB,WAGhCa,KAAiBC,EAIhBA,EAAcD,GAHZb,gCAMX,iBACQkB,EAAmB,OAENrE,KAAK0D,4CAAa,KAA1BH,UACHe,EAActE,KAAK6D,WAAWN,GACpCc,EAAiBC,EAAYC,aAAehB,GAAQc,EAAiBC,EAAYC,aAAehB,IAAS,GAErGvD,KAAKyD,gBAAgBF,GACvBiB,OAAOC,OACLJ,EAAiBC,EAAYC,aAAehB,GAC5Ce,EAAYN,mBAEPM,EAAYN,cAAgBhE,KAAK0E,gCAChCJ,EAAYN,cAAehE,KAAKyD,gBAAgBF,KAGlD,CAAEoB,mBAAa3E,KAAKyD,gBAAgBF,WAMxCvD,KAAK2D,gBAAkBW,EAAY1B,QACrC4B,OAAOC,OAAOJ,EAAiBC,EAAYC,aAAehB,GAAO,CAAEoB,mBAAa3E,KAAK2D,2DAIlF,CACLiB,cACKP,eCnET,0EAAuC,GAAxBQ,IAAAA,gBAAQC,iBACd,CACLC,SAAU,CACRC,KAAM,CACJH,OAAAA,EACAC,OAAQ,CAAEG,KAAM,iCCFX5D,EAAYjB,kBAClB8E,kBAAoB,IAAIC,EAAkB9D,QAC1C+D,mBAAqBpF,KAAKkF,kBAAkBG,6BAC5CjF,YAAcA,8CAGrB,sBAAYkF,yDAAY,GAAIvD,yCACpBlC,EAAU,UAEhByF,EAAU1E,SAAQ,SAAA2E,OACVC,EAAiBD,EAASE,gBAEhC5F,EAAQgD,KAAK,CACXM,MAAOoC,EAASG,KAChBC,MAAOJ,EAAS1E,EAAKuE,mBAAmBrD,GAAKC,MAA7B,UAChBgD,KAAMQ,IAGDA,KAGF3F,gFAGT,WAAwC0F,2FAChC1D,EAAS+D,YAAU5F,KAAKkF,kBAAkBW,8CAE9B7F,KAAKoF,yEAAZrD,kBACa/B,cACduF,EAASO,SAAS9F,KAAKoF,mBAAmBrD,GAAKmB,6BAAMnB,EAD7DF,EAAOE,GAAKlC,aAAekG,gFAKtBlE,0KAGT,WAAoCmE,2FAC5BnE,EAAS+D,YAAUI,GAAkBhG,KAAKkF,kBAAkBW,8CAEhD7F,KAAKoF,yEAAZrD,kBACa/B,cACdA,KAAKI,YAAYJ,KAAKoF,mBAAmBrD,GAAKmB,KAAK3B,OAAOC,+BAAQO,EAD1EF,EAAOE,GAAKlC,aAAekG,gFAKtBlE,6KChDT,SAAQoE,GACNA,EAAOA,GAAQ,IAAIC,SAEbR,EAAO1F,KAAKmG,SACdC,GAAQ,cAAgBH,EAAKI,UAAUC,SAAS,KAAKC,QAAQ,WACjEH,EAAOA,EAAKI,MAAM,EAAG,GAAK,IAAMJ,EAAKI,MAAM,EAAG,IAEvCd,EAAKe,QAAQf,EAAKc,MAAM,EAAG,IAAKJ,yBAGzC,kBACU,CAAC,MAAM,KAAK,KAAK,KAAK,MAAMK,QAAQ,UAAU,SAAAC,UACnDA,EAAIC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAK,IAAMH,EAAI,GAAGJ,SAAS,wCCTlEQ,EAASzF,yBACdwD,OAASiC,EAAQC,WAAWlC,YAC5B5C,OAAS6E,EAAQC,WAAW9E,YAC5BiD,kBAAoB,IAAIC,EAAkB9D,QAC1CO,aAAe5B,KAAKkF,kBAAkB7C,kBAEpC,IAAI2E,EAAY,CACrBnC,OAAQ7E,KAAKiH,wEAIjB,eACQC,EAAgB,OAEjB,IAAMnF,KAAO/B,KAAK4B,aACjB5B,KAAK4B,aAAaG,GAAKoF,eACzBD,EAAcnF,GAAO/B,KAAK4B,aAAaG,GAAKoF,qBAIzCD,2BAGT,iBACQrC,EAAS,GACTuC,EAAepH,KAAKqH,uCAENrH,KAAK6E,uCAAQ,KAEzB9C,UADEU,MACU6E,MAAM,KAAK,GAE7BzC,EAAO9C,GAAOqF,EAAarF,yCAGtB8C,gFCrCT,eAAS0C,yDAAS,GAAIC,yDAAa,gBAC5BC,MAAMC,QAAQH,SACX,IAAIvG,MAAM,qBAGd2G,EAAQ,EACRC,EAAU,WAELC,WACAF,EAAQJ,EAAO7F,gBAGfoG,WACAP,EAAOI,UAGTE,KAAW,KACVE,EAAUD,OAEZC,EAAQC,KAAOD,EAAQP,KACzBI,EAAUG,EAAQC,IAGhBD,EAAQP,GACVG,IACAJ,EAAOU,OAAON,EAAO,YAMlB,IAAM5F,KAFXgG,EAAQC,GAAKJ,EAEKG,EACZN,MAAMC,QAAQK,EAAQhG,KAASgG,EAAQhG,GAAKL,aACzCwG,QAAQX,EAAOI,EAAQ,GAAG5F,IAInC6F,YAGKL,WC9BUY,wBACNC,OAAevI,yDAAU,kBAC9BuI,aAAyBC,SACvB,IAAIrH,MAAM,qDAGboH,cAAgBA,OAChBE,YAAczI,EAAQyI,2FAG7B,WAAyBC,oIAAgB1I,iCAAU,GAC5C0I,wBACG,IAAIvH,MAAM,qDAGZsH,EAAczI,EAAQyI,aAAetI,KAAKsI,aAAe,OACzDE,EAAU3I,EAAQ2I,SAAW,GAC7BnH,EAAarB,KAAKoI,cAAchI,YAAYmI,GAE5CrD,EAAoB,IAAIC,EAAkB9D,KACK6D,EAAkBuD,sBAAtD/E,IAATpB,QAA8BsB,IAARhB,OACxBiB,EAAaqB,EAAkBxC,mBACVwC,EAAkBG,wBACvCpC,EAAYiC,EAAkBpD,eAE9B4G,EAAmB,IAAIC,EAAiBtH,EAAYrB,KAAKoI,cAAchI,uBACrCsI,EAAiBE,8CAAnDC,SAEAtB,EAAS,IAAIuB,EAEbC,8CAAO,+HAASC,IAAAA,wCAAmC,GAAvBC,IAAAA,QAASjB,IAAAA,GAAIkB,IAAAA,gBAErC3D,EAAWlE,EAAW8H,QAAQnB,GAAMiB,EAAQvD,SAE/BsC,GAAOiB,EAAQvD,4BAC1B,IAAIsB,EAAY,CACpBlC,OAAQ,CAAEG,KAAM,MAAOmE,KAAM,6BAI7BnG,EAAUoG,YACZJ,EAAQI,UAAYC,YAAU,IAAIpD,OAGpChB,EAAkBqE,iBAAgB,SAAAC,GAChCP,EAAQO,EAAY/G,MAAMvC,MAAQqH,EAAOW,QACvCe,EAAQO,EAAY/G,MAAMvC,oBAIDqF,EAASkE,OAAO,CAAEC,UAAWT,oBAApDzD,SAENwD,EAAO,YAAa,CAAEE,MAAAA,IACtBF,EAAO,cAAexD,EAAeC,4BAE9B,CACLT,KAAM,CACJ2E,OAAQnE,EACRV,OAAQ,CAAEG,KAAM,gDAIpB+D,EAAO,YAAa,CAAEE,MAAAA,EAAOU,UAAU,IACjC,IAAIC,OAA2BxI,mHAInCyI,EAAS,CACbC,YAAY,EAGZC,MAAO,CACL1H,QAAS,GACTb,KAAM,GACNwI,WAAY,EACZpF,OAAQ,CACNqF,UAAU,EACVC,eAAe,EACfC,aAAa,EACbC,WAAW,EACXC,gBAAgB,IAKpBC,QAAS,CACP9I,KAAM,SAAAuI,UAASA,EAAMvI,MAErBa,QAAS,SAAA0H,UAASA,EAAM1H,SAExB2H,WAAY,SAAAD,UAASA,EAAMC,YAE3BO,KAAM,SAAAR,UAAS,SAAAhC,UAAMgC,EAAMvI,KAAKF,MAAK,SAAAgC,UAAQA,EAAK+E,KAAiBN,QAIrEyC,UAAW,CACTC,oBAAYV,EAAOf,GACjBe,EAAM1H,QAAU2G,GAGlB0B,iBAASX,EAAOf,SACN2B,EAA8B3B,EAA9B2B,QAASC,EAAqB5B,EAArB4B,UAAWC,EAAU7B,EAAV6B,MAC5Bd,EAAMvI,KAAOmJ,GAAW,GAExBC,KAAYb,EAAMvI,MAAKoB,eAAQ+H,IAAWZ,EAAMvI,KAAOmJ,GAAW,GAElEZ,EAAMC,WAAac,KAAKC,KAAKF,EAAQtC,IAGvCyC,qBAAajB,OAAOf,yDAAU,GAC5Be,EAAMvI,KAAKoB,KAAKoG,IAGlBhC,mBAAW+C,SAASd,IAAAA,MAAOU,IAAAA,SACzBI,EAAMd,KAAWU,GAGnBsB,qBAAalB,EAAOf,OACZtB,EAAQqC,EAAMvI,KAAK0J,WAAU,SAAA5H,UAAQA,EAAK+E,KAAiBW,EAAQX,OAExEX,EAAQqC,EAAMvI,KAAKwG,OAAON,EAAO,EAAGsB,GAAWe,EAAMvI,KAAKoB,KAAKoG,IAGlEmC,oBAAYpB,EAAOhC,OACXL,EAAQqC,EAAMvI,KAAK0J,WAAU,SAAA5H,UAAQA,EAAK+E,KAAiBN,MAEhEL,GAASqC,EAAMvI,KAAKwG,OAAON,EAAO,KAKvC0D,QAAS,CACPC,mDAAQ,yHAAStC,IAAAA,OAAYC,IAAAA,iBAEnBvD,EAAO,IAAI6F,EACXC,KAAyB9F,KAAMA,EAAK4F,UAAarC,GACjDwC,EAAUnC,YAAU,IAAIpD,MAE1BjD,EAAUyI,YACZF,EAAqBE,UAAYD,GAG/BxI,EAAUoG,YACZmC,EAAqBnC,UAAYoC,GAGnCvG,EAAkBqE,iBAAgB,SAAAC,GAChCgC,EAAqBhC,EAAY/G,MAAMvC,MAAQqH,EAAOW,QACpDsD,EAAqBhC,EAAY/G,MAAMvC,oBAIpBmB,EAAWsK,OAAOH,kBAAnCjG,SACAC,EAAiBD,EAASE,SAEhCuD,EAAO,YAAa,CAAEE,MAAO,aAC7BF,EAAO,cAAexD,qBAEf,CACLR,KAAM,CACJ4G,cAAepG,GACfV,OAAQ,CAAEG,KAAM,gDAIpB+D,EAAO,YAAa,CAAEE,MAAO,WAAYU,UAAU,IAC7C,IAAIC,OAA2BxI,qHAIzCoF,oDAAS,6HAASuC,IAAAA,wCAA4B,GAAhBC,IAAAA,QAASjB,IAAAA,qBAC9Be,EAAK,CAAEC,OAAAA,GAAU,CAAEC,QAAAA,EAASjB,GAAAA,EAAIkB,MAAO,gHAGhDO,mDAAQ,6HAAST,IAAAA,wCAA4B,GAAhBC,IAAAA,QAASjB,IAAAA,qBAC7Be,EAAK,CAAEC,OAAAA,GAAU,CAAEC,QAAAA,EAASjB,GAAAA,EAAIkB,MAAO,+GAGhD2C,wDAAa,+HAAS7C,IAAAA,wCAAsC,GAA1B8C,IAAAA,KAAM9D,IAAAA,KAAI+D,SAAQC,IAC7ChE,IAAM8D,2CACF,CACL9G,KAAM,CACJF,OAAQ,CAAEG,KAAM,KAChBpD,OAAQgH,qCAMWxH,EAAW8H,QAAQnB,GAAIxG,iBAAxC+D,gCAGE,IAAIyB,EAAY,CACpBlC,OAAQ,CAAEG,KAAM,MAAOmE,KAAM,0BAI3B5D,EAAiBD,EAASE,UACjBqG,wBACXjD,2CACMH,EAAiBuD,iCAAiCzG,sCAFtD3D,OAINmH,EAAO,cAAexD,GACtBwD,EAAO,YAAa,CAAEE,MAAO,oCAEtB,CACLlE,KAAM,CACJnD,OAAAA,EACA8H,OAAQnE,EACRV,OAAQ,CAAEG,KAAM,gDAIpB+D,EAAO,YAAa,CAAEE,MAAO,gBAAiBU,UAAU,yHAK5DsC,yDAAc,iHAASlD,IAAAA,OACfmD,EAAiB,IAAIC,EAAe,CAAE1I,YAAAA,EAAaG,WAAAA,IACnDwI,EAAeF,EAAeG,2BACA5D,EAAiBE,6BAA6ByD,iBAA5EE,SAENvD,EAAO,aAAcuD,qBAEd,CACL1K,OAAQ0K,EACRzH,OAAQ,CAAEG,KAAM,wGAIpBuH,sDAAW,mJACPxD,IAAAA,wCACoE,OAApE1G,QAAAA,aAAU,KAAIuI,IAAAA,YAAW4B,aAAeC,KAAAA,aAAO,IAAGC,IAAAA,MAAO/J,IAAAA,gBAGnDuJ,EAAiB,IAAIC,EAAe,CACxC3I,gBAAiBnB,EACjBoB,YAAAA,EACAC,eAAgBf,EAChBgB,WAAAA,EACAC,WAAAA,IAGI+I,GAAQF,EAAO,IAAMC,GAASnE,GAC9BlH,EAAQ6K,EAAeU,0BACT3H,EAAkB4H,SAASxL,iBAAzCwJ,mBACkBzJ,EAAWE,KAAKD,GAAOqL,MAAMA,GAASnE,GAASoE,KAAKA,GAAMpL,sBAA5E8D,SACAyH,EAAkBzH,EAAU0H,KAAI,SAAAzH,UAAYA,EAASE,YAE3DuD,EAAO,UAAW,CAAE4B,QAASmC,EAAiBlC,UAAAA,EAAWC,MAAAA,IACzD9B,EAAO,YAAa,CAAEE,MAAO,kCAEtB,CACLlE,KAAM,CACJ4F,QAASmC,EACTlL,OAAQgH,EACR/D,OAAQ,CAAEG,KAAM,gDAIpB+D,EAAO,YAAa,CAAEE,MAAO,cAAeU,UAAU,yHAK1DzI,oDAAS,6HAAS6H,IAAAA,wCAAmB,GAAPhB,IAAAA,qBAEH3G,EAAW8H,QAAQnB,GAAIxG,iBAAxC+D,+BAGE,IAAIyB,EAAY,CACpBlC,OAAQ,CAAEG,KAAM,IAAKmE,KAAM,6BAI/B7D,EAAS0H,SAETjE,EAAO,aAAchB,GACrBgB,EAAO,YAAa,CAAEE,MAAO,gCAEtB,CAAEpE,OAAQ,CAAEG,KAAM,+CAEzB+D,EAAO,YAAa,CAAEE,MAAO,YAAaU,UAAU,2HAO5DpF,OAAOC,OAAOqF,EAAOuB,QAASxL,EAAQwL,SACtC7G,OAAOC,OAAOqF,EAAOW,UAAW5K,EAAQ4K,6BAEjCX"}